#!groovy
properties([
    [$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/ia-case-documents-api.git'],
    pipelineTriggers([[$class: 'GitHubPushTrigger']]),
    parameters([
        string(name: 'IA_AIP_FRONTEND_URL', defaultValue: 'https://immigration-appeal.aat.platform.hmcts.net/', description: 'The AIP frontend URL that will be included in personalisation')
    ])
])

@Library("Infrastructure")

def type = "java"
def product = "ia"
def component = "case-documents-api"

def secrets = [
    'ia-${env}': [

        secret('test-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
        secret('test-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
        secret('test-law-firm-a-username', 'TEST_LAW_FIRM_A_USERNAME'),
        secret('test-law-firm-a-password', 'TEST_LAW_FIRM_A_PASSWORD'),
        secret('test-adminofficer-username', 'TEST_ADMINOFFICER_USERNAME'),
        secret('test-adminofficer-password', 'TEST_ADMINOFFICER_PASSWORD'),
        secret('test-citizen-username', 'TEST_CITIZEN_USERNAME'),
        secret('test-citizen-password', 'TEST_CITIZEN_PASSWORD'),

        secret('test-judge-x-username', 'TEST_JUDGE_X_USERNAME'),
        secret('test-judge-x-password', 'TEST_JUDGE_X_PASSWORD'),

        secret('em-stitching-enabled', 'IA_EM_STITCHING_ENABLED'),

        secret('idam-client-id', 'IA_IDAM_CLIENT_ID'),
        secret('idam-secret', 'IA_IDAM_SECRET'),
        secret('s2s-secret', 'IA_S2S_SECRET'),
        secret('s2s-microservice', 'IA_S2S_MICROSERVICE'),
        secret('launch-darkly-sdk-key', 'LAUNCH_DARKLY_SDK_KEY'),
        secret('ia-config-validator-secret', 'IA_CONFIG_VALIDATOR_SECRET'),

        secret('app-insights-connection-string', 'app-insights-connection-string'),

        secret('customer-services-telephone', 'IA_CUSTOMER_SERVICES_TELEPHONE'),
        secret('customer-services-email', 'IA_CUSTOMER_SERVICES_EMAIL'),
        secret('gov-call-charges-url', 'IA_BAIL_GOV_CALL_CHARGES_URL')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

withPipeline(type, product, component) {
    env.IA_AIP_FRONTEND_URL = params.IA_AIP_FRONTEND_URL

    env.DOCMOSIS_ENDPOINT = "https://docmosis-development.platform.hmcts.net"
    env.IA_IDAM_REDIRECT_URI = "https://ia-case-api-aat.service.core-compute-aat.internal/oauth2/callback"
    env.DM_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.CCD_GW_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
    env.CASE_DOCUMENT_AM_URL = "http://ccd-case-document-am-api-aat.service.core-compute-aat.internal"
    env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.EM_BUNDLER_URL = "http://em-ccd-orchestrator-aat.service.core-compute-aat.internal"
    env.EM_BUNDLER_STITCH_URI = "/api/stitch-ccd-bundles"
    env.OPEN_ID_IDAM_URL = "https://idam-web-public.aat.platform.hmcts.net"

    enableAksStagingDeployment()
    disableLegacyDeployment()
    loadVaultSecrets(secrets)

    afterSuccess('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    afterSuccess('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    afterAlways('test') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/reports/tests/**'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/reports/pmd/**'
    }

    enableSlackNotifications('#ia-tech')
}
