#!groovy

properties([
        // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
        pipelineTriggers([cron('H 8 * * 1-5')]),
        parameters([
                string(name: 'URL_TO_TEST', defaultValue: 'http://ia-case-documents-api-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
                string(name: 'SecurityRules',
                        defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                        description: 'The URL you want to run these tests against'),
                booleanParam(name: 'skipSmokeTest', defaultValue: false, description: 'Tick the checkbox to skip Smoke Test stage'),
                booleanParam(name: 'skipUnitTests', defaultValue: false, description: 'Tick the checkbox to skip Unit Tests stage'),
                booleanParam(name: 'skipIntegrationTests', defaultValue: false, description: 'Tick the checkbox to skip Integration Tests stage'),
                booleanParam(name: 'skipFortifyScan', defaultValue: false, description: 'Tick the checkbox to skip Fortify Scan stage'),
                booleanParam(name: 'skipSecurityScan', defaultValue: false, description: 'Tick the checkbox to skip Security Scan stage'),
                booleanParam(name: 'skipMutationTests', defaultValue: false, description: 'Tick the checkbox to skip Mutation Tests stage'),
                booleanParam(name: 'skipFullFunctionalTests', defaultValue: false, description: 'Tick the checkbox to skip Full Functional Tests stage'),
        ])
])

@Library("Infrastructure")
import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "ia"
def component = "case-documents-api"

def secrets = [
    'ia-${env}': [

        secret('test-caseofficer-username', 'TEST_CASEOFFICER_USERNAME'),
        secret('test-caseofficer-password', 'TEST_CASEOFFICER_PASSWORD'),
        secret('test-law-firm-a-username', 'TEST_LAW_FIRM_A_USERNAME'),
        secret('test-law-firm-a-password', 'TEST_LAW_FIRM_A_PASSWORD'),
        secret('test-citizen-username', 'TEST_CITIZEN_USERNAME'),
        secret('test-citizen-password', 'TEST_CITIZEN_PASSWORD'),
        secret('test-adminofficer-username', 'TEST_ADMINOFFICER_USERNAME'),
        secret('test-adminofficer-password', 'TEST_ADMINOFFICER_PASSWORD'),

        secret('test-judge-x-username', 'TEST_JUDGE_X_USERNAME'),
        secret('test-judge-x-password', 'TEST_JUDGE_X_PASSWORD'),
        secret('system-username', 'SYSTEM_USERNAME'),
        secret('system-password', 'SYSTEM_PASSWORD'),

        secret('idam-client-id', 'IA_IDAM_CLIENT_ID'),
        secret('idam-secret', 'IA_IDAM_SECRET'),
        secret('s2s-secret', 'IA_S2S_SECRET'),
        secret('s2s-microservice', 'IA_S2S_MICROSERVICE'),
        secret('launch-darkly-sdk-key', 'LAUNCH_DARKLY_SDK_KEY'),
        secret('ia-config-validator-secret', 'IA_CONFIG_VALIDATOR_SECRET'),

        secret('app-insights-connection-string', 'app-insights-connection-string'),

        secret('customer-services-telephone', 'IA_CUSTOMER_SERVICES_TELEPHONE'),
        secret('customer-services-email', 'IA_CUSTOMER_SERVICES_EMAIL'),
        secret('gov-call-charges-url', 'IA_BAIL_GOV_CALL_CHARGES_URL'),

        secret('system-username', 'IA_SYSTEM_USERNAME'),
        secret('system-password', 'IA_SYSTEM_PASSWORD'),

        secret('test-homeoffice-lart-username', 'TEST_HOMEOFFICE_LART_USERNAME'),
        secret('test-homeoffice-lart-password', 'TEST_HOMEOFFICE_LART_PASSWORD'),

        secret('test-homeoffice-pou-username', 'TEST_HOMEOFFICE_POU_USERNAME'),
        secret('test-homeoffice-pou-password', 'TEST_HOMEOFFICE_POU_PASSWORD')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     version    : '',
     envVariable: envVar
    ]
}

GradleBuilder builder = new GradleBuilder(this, product)

withNightlyPipeline(type, product, component) {
    env.TEST_URL = params.URL_TO_TEST
    env.Rules = params.SecurityRules

    env.DOCMOSIS_ENDPOINT = "https://docmosis-development.platform.hmcts.net"
    env.IA_IDAM_REDIRECT_URI = "https://ia-case-api-aat.service.core-compute-aat.internal/oauth2/callback"
    env.DM_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.CCD_GW_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.IDAM_URL = "https://idam-api.aat.platform.hmcts.net"
    env.CASE_DOCUMENT_AM_URL = "http://ccd-case-document-am-api-aat.service.core-compute-aat.internal"
    env.S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.EM_BUNDLER_URL = "http://em-ccd-orchestrator-aat.service.core-compute-aat.internal"
    env.EM_BUNDLER_STITCH_URI = "/api/stitch-ccd-bundles"
    env.OPEN_ID_IDAM_URL = "https://idam-web-public.aat.platform.hmcts.net"

    loadVaultSecrets(secrets)
    if (!params.skipFortifyScan) {
        enableFortifyScan()
    }
    if (!params.skipSecurityScan) {
        enableSecurityScan()
    }
    if (!params.skipMutationTests) {
        enableMutationTest()
    }
    if (!params.skipFullFunctionalTests) {
        enableFullFunctionalTest()
    }
    enableSlackNotifications('#ia-tech')

    afterAlways('build') {
        if (!params.skipSmokeTest) {
            stage('Smoke Test') {
                try {
                    builder.gradle("smoke")
                } catch (Error) {
                    unstable(message: "${STAGE_NAME} is unstable")
                } finally {
                    publishHTML target: [
                            allowMissing         : true,
                            alwaysLinkToLastBuild: true,
                            keepAll              : true,
                            reportDir            : "build/reports/tests/smoke",
                            reportFiles          : "index.html",
                            reportName           : "Smoke Test Report"
                    ]
                }
            }
        }
        if (!params.skipUnitTests) {
            stage('Unit Tests') {
                try {
                    builder.gradle('test')
                } catch (Error) {
                    unstable(message: "${STAGE_NAME} is unstable")
                } finally {
                    publishHTML target: [
                            allowMissing         : true,
                            alwaysLinkToLastBuild: true,
                            keepAll              : true,
                            reportDir            : "build/reports/tests/test",
                            reportFiles          : "index.html",
                            reportName           : "Unit Test Report"
                    ]
                }
            }
        }
        if (!params.skipIntegrationTests) {
            stage('Integration Tests') {
                try {
                    builder.gradle('integration')
                } catch (Error) {
                    unstable(message: "${STAGE_NAME} is unstable")
                } finally {
                    publishHTML target: [
                            allowMissing         : true,
                            alwaysLinkToLastBuild: true,
                            keepAll              : true,
                            reportDir            : "build/reports/tests/integration",
                            reportFiles          : "index.html",
                            reportName           : "Integration Test Report"
                    ]
                }
            }
        }
    }

    afterAlways('DependencyCheckNightly') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports",
                reportFiles          : 'dependency-check-report.html',
                reportName           : 'Dependency Check Report'
        ])
    }

    afterAlways('securityScan') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "functional-output",
                reportFiles          : 'api-report.html',
                reportName           : 'Security Scan Report'
        ])
    }

    afterAlways('fortify-scan') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "Fortify Scan",
                reportFiles          : "FortifyScanReport.html",
                reportName           : "Fortify Scan Report"
        ]
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }

    before('fullFunctionalTest') {
        try {
            builder.gradle('smoke')
            builder.gradle('test')
            builder.gradle('integration')
        } finally {
            publishHTML target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "build/reports/tests/test",
                    reportFiles          : "index.html",
                    reportName           : "Unit Test Report"
            ]
            publishHTML target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "build/reports/tests/smoke",
                    reportFiles          : "index.html",
                    reportName           : "Smoke Test Report"
            ]
            publishHTML target: [
                    allowMissing         : true,
                    alwaysLinkToLastBuild: true,
                    keepAll              : true,
                    reportDir            : "build/reports/tests/integration",
                    reportFiles          : "index.html",
                    reportName           : "Integration Test Report"
            ]
            junit '**/test-results/**/*.xml'
        }
    }

    afterAlways('mutationTest') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/pitest",
                reportFiles          : 'index.html',
                reportName           : 'IAC Timed Event Service Mutation Test Report'
        ])
    }

    afterAlways('fullFunctionalTest') {
        publishHTML([
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/functional",
                reportFiles          : 'index.html',
                reportName           : 'Functional Test Report'
        ])

        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/build/reports/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/reports/**/*'
    }
}
